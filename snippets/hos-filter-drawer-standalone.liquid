{%- comment -%}
Standalone Custom Filter Drawer (HOS)
- Self-contained: markup + styles + script in one file
- Plus/minus dropdown per filter
- Multi-column checkbox grid
- Custom Apply/Remove All with URL navigation
Params:
  results: object
  section_id: string
  results_url: string (optional, fallback to results.url)
{%- endcomment -%}

<style>
/***** Standalone Drawer Styles *****/
.hos2-filter-drawer { display:block; padding:0.5rem 1rem 1rem; }
.hos2-filter-drawer, .hos2-filter-drawer * { box-sizing: border-box; }
.hos2-filter__group { border-bottom: 1px solid #e6e6e6; }
.hos2-filter__summary { display:flex; align-items:center; justify-content:space-between; width:100%; padding:1.1rem 0; cursor:pointer; background:transparent; border:0; color:inherit; text-align:left; }
.hos2-filter__title { font-weight:700; letter-spacing:0.03em; text-transform:uppercase; font-size:1rem; color:rgba(0,0,0,0.85); }
.hos2-filter__icon { width:14px; height:14px; display:inline-block; }
.hos2-filter__icon svg { width:14px; height:14px; display:block; }
.hos2-filter__icon--minus { display:none; }
.hos2-filter__group.is-open .hos2-filter__icon--plus { display:none; }
.hos2-filter__group.is-open .hos2-filter__icon--minus { display:inline-block; }
.hos2-filter__content { padding:0.8rem 0 1.2rem; }
.hos2-filter__group.is-open .hos2-filter__content { border-top:1px solid #efefef; }
.hos2-filter__grid { display:grid; grid-template-columns:repeat(3, minmax(0, 1fr)); gap:0.8rem 1.4rem; padding:0; margin:0; list-style:none; }
.hos2-filter__item { margin:0; }
.hos2-filter__label { display:flex; align-items:center; gap:0.6rem; position:relative; padding:0.35rem 0; font-size:1rem; line-height:1.7; color:rgba(0,0,0,0.9); }
.hos2-filter__label.is-disabled { opacity:0.5; cursor:not-allowed; }
.hos2-filter__summary:focus-visible,
.hos2-footer .button:focus-visible,
.hos2-filter__label:focus-within { outline:2px solid rgba(0,0,0,0.45); outline-offset:2px; border-radius:4px; }
.hos2-filter__checkbox { position:absolute; opacity:0; width:1px; height:1px; pointer-events:none; left:-9999px; }
.hos2-filter__box { width:18px; height:18px; border:1.6px solid #8f8f8f; border-radius:3px; background:#fff; flex-shrink:0; position:relative; box-shadow: 0 0 0 1px rgba(0,0,0,0.02) inset; }
.hos2-filter__checkbox:checked + .hos2-filter__box { border-color:#111; }
.hos2-filter__checkbox:checked + .hos2-filter__box::after { content:''; position:absolute; left:4px; top:4px; width:10px; height:10px; background:#111; border-radius:2px; }
.hos2-filter__text { line-height:1.5; }
.hos2-swatch { width:14px; height:14px; margin-right:4px; border-radius:50%; border:1px solid rgba(0,0,0,0.2); background-size:cover; background-position:center; flex-shrink:0; }
.hos2-filter__label .hos2-swatch + .hos2-filter__checkbox + .hos2-filter__box { margin-left:2px; }
.hos2-price { display:flex; gap:0.8rem; align-items:center; flex-wrap:wrap; }
.hos2-price input[type="number"] { width:8rem; padding:0.6rem 0.8rem; border:1px solid rgba(0,0,0,0.3); border-radius:4px; font:inherit; }
.hos2-footer { display:flex; justify-content:space-between; gap:1rem; padding:1rem 0.6rem; position:sticky; bottom:0; background:#fff; border-top:1px solid #e6e6e6; }
.hos2-footer > * { width:50%; }
.hos2-footer .button { width:100%; padding:1rem 1.2rem; border-radius:6px; text-transform:uppercase; font-weight:700; letter-spacing:0.03em; font-size:0.95rem; }
.hos2-footer .button.button--secondary { background:#ebebeb; color:#333; border:1px solid #dcdcdc; }
.hos2-footer .button.button--secondary:hover { background:#e3e3e3; }
.hos2-footer .button.button--primary { background:#f7e8e8; color:#111; border:1px solid #efd9d9; }
.hos2-footer .button.button--primary:hover { background:#f3e0e0; }
/* Hide Dawn native footer under our drawer */
.mobile-facets__main .mobile-facets__footer { display:none; }

/* Responsive: fallback to 2 columns on narrow screens */
@media (max-width: 360px) {
  .hos2-filter__grid { grid-template-columns: repeat(2, 1fr); }
}

/* Swatch color mapping (basic) */
.hos2-swatch[data-swatch-name="black"]{background:#000}
.hos2-swatch[data-swatch-name="white"],
.hos2-swatch[data-swatch-name="off-white"],
.hos2-swatch[data-swatch-name="ivory"]{background:#fff}
.hos2-swatch[data-swatch-name="grey"],
.hos2-swatch[data-swatch-name="gray"]{background:#9e9e9e}
.hos2-swatch[data-swatch-name="red"]{background:#e53935}
.hos2-swatch[data-swatch-name="pink"]{background:#f06292}
.hos2-swatch[data-swatch-name="peach"]{background:#ffccbc}
.hos2-swatch[data-swatch-name="orange"],
.hos2-swatch[data-swatch-name="deep orange"]{background:#fb8c00}
.hos2-swatch[data-swatch-name="yellow"]{background:#ffeb3b}
.hos2-swatch[data-swatch-name="mustard"]{background:#d4a017}
.hos2-swatch[data-swatch-name="green"]{background:#43a047}
.hos2-swatch[data-swatch-name="mint"]{background:#98ff98}
.hos2-swatch[data-swatch-name="teal"],
.hos2-swatch[data-swatch-name="turquoise"],
.hos2-swatch[data-swatch-name="teal green"],
.hos2-swatch[data-swatch-name="teal blue"],
.hos2-swatch[data-swatch-name="teal green "]{background:#26a69a}
.hos2-swatch[data-swatch-name="blue"]{background:#1e88e5}
.hos2-swatch[data-swatch-name="navy"],
.hos2-swatch[data-swatch-name="navy blue"]{background:#283593}
.hos2-swatch[data-swatch-name="powder blue"]{background:#b3cde0}
.hos2-swatch[data-swatch-name="light green"]{background:#8bc34a}
.hos2-swatch[data-swatch-name="purple"]{background:#7e57c2}
.hos2-swatch[data-swatch-name="plum"]{background:#8e4585}
.hos2-swatch[data-swatch-name="maroon"]{background:#800000}
.hos2-swatch[data-swatch-name="magenta"]{background:#d81b60}
.hos2-swatch[data-swatch-name="lilac"]{background:#c8a2c8}
.hos2-swatch[data-swatch-name="cream"]{background:#fffdd0}
.hos2-swatch[data-swatch-name="wine"]{background:#722f37}
.hos2-swatch[data-swatch-name="multi color"],
.hos2-swatch[data-swatch-name="multi"]{background:linear-gradient(45deg,#e53935,#fb8c00,#fdd835,#43a047,#1e88e5,#8e24aa)}
</style>

<div class="hos2-filter-drawer" data-hos2-root>
  <div style="padding:0.4rem 0 0.8rem;">
    <h3 style="margin:0; font-size:1.2rem; font-weight:800; line-height:1.5; text-align:left;">Filter</h3>
    <div style="margin-top:0.25rem; font-size:0.95rem; color:rgba(0,0,0,0.6);">{{ results.products_count | default: results_count }} products</div>
  </div>
  {%- for filter in results.filters -%}
    {% liquid
      assign is_list = false
      if filter.type == 'list' or filter.type == 'boolean'
        assign is_list = true
      endif
      assign is_price = false
      if filter.type == 'price_range'
        assign is_price = true
      endif
      assign filter_label = filter.label | default: ''
      assign filter_label_lc = filter_label | downcase
      assign is_color_group = false
      if filter_label_lc contains 'color'
        assign is_color_group = true
      endif
    %}
    {%- if is_list or is_price -%}
    {%- unless filter_label_lc == 'availability' -%}
      {% liquid assign content_id = 'Hos2-Content-' | append: filter.param_name | escape | append: '-' | append: section_id %}
      <div class="hos2-filter__group" id="Hos2-{{ filter.param_name | escape }}-{{ section_id }}">
        <button type="button" class="hos2-filter__summary" data-hos2-toggle aria-expanded="false" aria-controls="{{ content_id }}">
          <span class="hos2-filter__title">{{ filter.label | escape }}</span>
          <span class="hos2-filter__icon hos2-filter__icon--plus">{{ 'icon-plus.svg' | inline_asset_content }}</span>
          <span class="hos2-filter__icon hos2-filter__icon--minus">{{ 'icon-minus.svg' | inline_asset_content }}</span>
        </button>
        <div class="hos2-filter__content" id="{{ content_id }}" hidden>
          {%- if is_list -%}
            <ul class="hos2-filter__grid" role="list">
              {%- liquid
                assign sorted_values = filter.values
                if filter.operator == 'AND'
                  assign active_filter_values = filter.values | where: 'active', true
                  assign inactive_filter_values = filter.values | where: 'active', false
                  assign sorted_values = active_filter_values | concat: inactive_filter_values
                endif
              -%}
              {%- for value in sorted_values -%}
                {% liquid
                  assign input_id = 'Hos2-' | append: filter.param_name | escape | append: '-' | append: forloop.index
                  assign is_disabled = false
                  if value.count == 0 and value.active == false
                    assign is_disabled = true
                  endif
                %}
                <li class="hos2-filter__item">
                  <label for="{{ input_id }}" class="hos2-filter__label{% if is_disabled %} is-disabled{% endif %}{% if value.active %} is-active{% endif %}">
                    {%- if is_color_group -%}
                      <span class="hos2-swatch" data-swatch-name="{{ value.label | downcase | escape }}" aria-hidden="true"></span>
                    {%- endif -%}
                    <input id="{{ input_id }}" class="hos2-filter__checkbox" type="checkbox" name="{{ value.param_name }}" value="{{ value.value }}" {% if value.active %}checked{% endif %} {% if is_disabled %}disabled{% endif %}>
                    <span class="hos2-filter__box" aria-hidden="true"></span>
                    <span class="hos2-filter__text">{{ value.label | escape }}</span>
                  </label>
                </li>
              {%- endfor -%}
            </ul>
          {%- else -%}
            {% liquid
              assign min_name = filter.min_value.param_name
              assign max_name = filter.max_value.param_name
              assign min_val = filter.min_value.value
              assign max_val = filter.max_value.value
              assign range_max = filter.range_max
            %}
            <div class="hos2-price">
              <label>
                <span class="visually-hidden">Min</span>
                <input type="number" inputmode="numeric" step="1" min="0" max="{{ range_max }}" name="{{ min_name }}" value="{{ min_val }}" placeholder="Min">
              </label>
              <span>–</span>
              <label>
                <span class="visually-hidden">Max</span>
                <input type="number" inputmode="numeric" step="1" min="0" max="{{ range_max }}" name="{{ max_name }}" value="{{ max_val }}" placeholder="Max">
              </label>
              <span class="caption">Max {{ range_max | money }}</span>
            </div>
          {%- endif -%}
        </div>
      </div>
    {%- endunless -%}
    {%- endif -%}
  {%- endfor -%}

  <div class="hos2-footer gradient">
    <a class="button button--secondary" href="{{ results_url | default: results.url }}">{{ 'products.facets.clear_all' | t }}</a>
    <button type="button" class="button button--primary" data-hos2-apply>{{ 'products.facets.apply' | t }}</button>
  </div>
</div>

<script>
/***** Standalone Drawer Script *****/
(() => {
  const root = document.querySelector('[data-hos2-root]');
  if (!root) return;

  function toggle(btn) {
    const group = btn.closest('.hos2-filter__group');
    const content = group && group.querySelector('.hos2-filter__content');
    if (!group || !content) return;
    const expanded = btn.getAttribute('aria-expanded') === 'true';
    const next = !expanded;
    btn.setAttribute('aria-expanded', String(next));
    group.classList.toggle('is-open', next);
    if (next) content.removeAttribute('hidden'); else content.setAttribute('hidden', '');
  }

  root.addEventListener('click', (e) => {
    const t1 = e.target.closest('[data-hos2-toggle]');
    if (t1) { e.preventDefault(); e.stopPropagation(); toggle(t1); return; }
    const apply = e.target.closest('[data-hos2-apply]');
    if (apply) { e.preventDefault(); e.stopPropagation(); applyNow(); return; }
  }, true);

  // Build URL from current selections in this drawer and navigate
  function applyNow() {
    const baseUrl = (root.getAttribute('data-base-url') || window.location.pathname);
    const params = new URLSearchParams(window.location.search);
    // Reset page when applying new filters to avoid empty pagination states
    params.delete('page');
    // Remove existing filter params to avoid duplicates
    // We can be conservative: clear all param names we will re-add
    const names = new Set();
    root.querySelectorAll('.hos2-filter__checkbox[name]').forEach(cb => names.add(cb.name));
    root.querySelectorAll('.hos2-price input[name]').forEach(inp => names.add(inp.name));
    names.forEach(n => params.delete(n));

    // Add checked list/boolean values
    root.querySelectorAll('.hos2-filter__checkbox:checked').forEach(cb => {
      params.append(cb.name, cb.value);
    });

    // Add price values with basic normalization
    const priceInputs = Array.from(root.querySelectorAll('.hos2-price input[name]'));
    if (priceInputs.length) {
      // Extract min/max and their constraints
      const minInput = priceInputs.find(i => i.getAttribute('name') && i.getAttribute('name').indexOf('min') >= 0) || priceInputs[0];
      const maxInput = priceInputs.find(i => i.getAttribute('name') && i.getAttribute('name').indexOf('max') >= 0) || priceInputs[1];
      const clamp = (val, lo, hi) => Math.max(lo, Math.min(hi, val));
      const toInt = (v) => {
        const n = parseInt(String(v).replace(/[^0-9]/g, ''), 10);
        return Number.isFinite(n) ? n : null;
      };
      const bounds = (inp) => ({
        min: toInt(inp.getAttribute('min')) ?? 0,
        max: toInt(inp.getAttribute('max')) ?? 999999999,
      });
      const bMin = bounds(minInput);
      const bMax = bounds(maxInput);
      let vMin = toInt(minInput.value);
      let vMax = toInt(maxInput.value);
      if (vMin != null) vMin = clamp(vMin, bMin.min, bMin.max);
      if (vMax != null) vMax = clamp(vMax, bMax.min, bMax.max);
      // Ensure min <= max when both present
      if (vMin != null && vMax != null && vMin > vMax) {
        const tmp = vMin; vMin = vMax; vMax = tmp;
      }
      if (vMin != null) params.set(minInput.name, String(vMin)); else params.delete(minInput.name);
      if (vMax != null) params.set(maxInput.name, String(vMax)); else params.delete(maxInput.name);
    }

    const url = baseUrl + (params.toString() ? ('?' + params.toString()) : '');
    window.location.assign(url);
  }
})();
</script>
